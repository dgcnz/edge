cmake_minimum_required(VERSION 3.18 FATAL_ERROR)
project(example-app)

# *** Set CUDA path ***
set(CUDA_TOOLKIT_ROOT_DIR $ENV{CONDA_PREFIX})
# *** Find python site-packages **
find_package (Python COMPONENTS Interpreter Development)
message(STATUS "PYTHON_EXECUTABLE: ${Python_EXECUTABLE}")
execute_process(COMMAND ${Python_EXECUTABLE} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())" OUTPUT_VARIABLE Python_PACKAGES OUTPUT_STRIP_TRAILING_WHITESPACE)
message(STATUS "Python_PACKAGES: ${Python_PACKAGES}")


# *** Set libtorch path ***
# set libtorch path
set(LIBTORCH_PATH "${PROJECT_SOURCE_DIR}/third-party/libtorch")
set(LIBTORCH_TRT_PATH "${PROJECT_SOURCE_DIR}/third-party/torch_tensorrt")
list(APPEND CMAKE_PREFIX_PATH "${LIBTORCH_PATH}")
# *** Set libtensorrt path from Python_PACKAGES ***
# list(APPEND CMAKE_PREFIX_PATH "${Python_PACKAGES}/tensorrt_libs")
# list the files in the directory Python_PACKAGES/tensorrt_libs/*
# file(GLOB TORCH_TENSORRT_LIBS ${PROJECT_SOURCE_DIR}/third-party/torch_tensorrt/lib/*runtime*)


# file(GLOB TENSORRT_LIBS ${Python_PACKAGES}/tensorrt_libs/*)
# list(REMOVE_ITEM TENSORRT_LIBS "${Python_PACKAGES}/tensorrt_libs/__init__.py")
# message(STATUS "TENSORRT_LIBS: ${TENSORRT_LIBS}")
# message(STATUS "TORCH_TENSORRT_LIBS: ${TORCH_TENSORRT_LIBS}")

# print CMAKE_PREFIX_PATH
message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
set(TensorRT_DIR ${Python_PACKAGES}/tensorrt_libs)
# find_package(TensorRT REQUIRED)
# find_library(nvinfer_plugin)
# add libnvinfer_plugin to TENSORRT_LIBS
find_package(Torch REQUIRED)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")

# add_executable(example-app example-app.cpp)
add_executable(example-app example-app.cpp)

target_link_libraries(example-app "${TORCH_LIBRARIES}")
# -Wl,--no-as-needed -ltorchtrt -Wl,--as-needed
# link directory to LIBTORCH_PATH/lib
target_link_directories(example-app PRIVATE ${LIBTORCH_PATH}/lib)
target_link_directories(example-app PRIVATE ${Python_PACKAGES}/tensorrt_libs)
target_link_directories(example-app PRIVATE ${LIBTORCH_TRT_PATH}/lib)
target_include_directories(example-app PRIVATE ${LIBTORCH_TRT_PATH}/include)
# link libtorchtrt_runtime, libtorchtrt, libtorchtrt_plugins and nvinfer
# target_link_libraries(example-app nvinfer)
target_link_libraries(example-app -l:libnvinfer_plugin.so.10)
target_link_libraries(example-app -l:libnvinfer.so.10)
target_link_libraries(example-app torchtrt torch_global_deps)
# target_link_libraries(example-app -Wl,--no-as-needed torchtrt_runtime )
# include to tensorrt

# target_link_libraries(example-app -Wl,--no-as-needed -ltorch_global_deps ${TENSORRT_LIBS})
# target_link_libraries(example-app -Wl,--no-as-needed ${TORCH_TENSORRT_LIBS})


set_property(TARGET example-app PROPERTY CXX_STANDARD 17)
